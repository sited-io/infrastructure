---
# @meta description: >
#
# Requires service user set up in Zitadel and client_secret saved to Vault
#
# - Configure zitadel projects
# @end
# @todo automation: Configure links to privacy-policy and terms-of-service

- name: Manually add service user with credentials
  ansible.builtin.pause:
    prompt: Login to Zitadel admin UI and create service user. Afterwards add credentials to vault at kv2/zitadel/users/service

- ansible.builtin.import_tasks: ../../common-tasks/vault_login/vault_login.yaml

- name: Get zitadel service user client secret
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  ansible.builtin.command: |
    vault kv get -mount=kv2 -field=client_secret \
          /zitadel/users/service
  register: client_secret_out

- ansible.builtin.set_fact:
    client_secret: "{{ client_secret_out.stdout }}"

- name: Get access token for service user
  ansible.builtin.uri:
    url: "https://{{ zitadel.domain }}/oauth/v2/token"
    method: POST
    user: "{{ zitadel.service_user }}"
    password: "{{ client_secret }}"
    force_basic_auth: true
    body_format: form-urlencoded
    body:
      grant_type: "client_credentials"
      scope: "openid profile email urn:zitadel:iam:org:project:id:zitadel:aud"
  register: get_token_out

- ansible.builtin.set_fact:
    access_token: "{{ get_token_out.json.access_token }}"

- name: Check if main project exists
  ansible.builtin.uri:
    url: "https://{{ zitadel.domain }}/management/v1/projects/_search"
    method: POST
    headers:
      authorization: "Bearer {{ access_token }}"
      content-type: application/json
    body_format: json
    body:
      queries:
        - nameQuery:
            name: main
  register: search_main_project_out

- name: Create main project
  ansible.builtin.uri:
    url: "https://{{ zitadel.domain }}/management/v1/projects"
    method: POST
    headers:
      authorization: "Bearer {{ access_token }}"
      content-type: application/json
    body_format: json
    body:
      name: main
  register: create_project_out
  when: search_main_project_out.json.result is undefined

- ansible.builtin.set_fact:
    main_project_id: "{{ search_main_project_out.json.result[0].id }}"
  when: search_main_project_out.json.result is defined

- ansible.builtin.set_fact:
    main_project_id: "{{ create_project_out.json.id }}"
  when: search_main_project_out.json.result is undefined

- ansible.builtin.include_tasks: main_application.yaml
  with_items: "{{ zitadel.main_apps }}"

- name: Check if websites project exists
  ansible.builtin.uri:
    url: "https://{{ zitadel.domain }}/management/v1/projects/_search"
    method: POST
    headers:
      authorization: "Bearer {{ access_token }}"
      content-type: application/json
    body_format: json
    body:
      queries:
        - nameQuery:
            name: websites
  register: search_websites_project_out

- name: Create websites project
  ansible.builtin.uri:
    url: "https://{{ zitadel.domain }}/management/v1/projects"
    method: POST
    headers:
      authorization: "Bearer {{ access_token }}"
      content-type: application/json
    body_format: json
    body:
      name: websites
  register: create_project_out
  when: search_websites_project_out.json.result is undefined
