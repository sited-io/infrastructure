---
# @meta description: >
# Requires all core infrastructure components to be deployed and configured
#
# - Create postgres user and databases for services
# @end

- ansible.builtin.import_tasks: ../../common-tasks/vault_login/vault_login.yaml

- run_once: true
  delegate_to: localhost
  become: false
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  block:
    - name: Ensure working directory
      ansible.builtin.file:
        path: /tmp/services/postgres
        state: directory

    - ansible.builtin.set_fact:
        allowed_roles: "{{ services.database_users | map(attribute='name') | join(',') }}"

    - name: Configure postgres database secret engine with allowed roles
      ansible.builtin.command: >-
        vault write database/config/postgres
          allowed_roles={{ allowed_roles }}

- run_once: true
  become: true
  become_user: postgres
  block:
    - name: Create databases
      community.postgresql.postgresql_db:
        name: "{{ item.name }}"
        state: present
      with_items: "{{ services.databases }}"

    - name: Create users
      community.postgresql.postgresql_user:
        db: postgres
        name: "{{ item.name }}"
        role_attr_flags: "{% if 'roles' in item %}{{ item.roles | join(',') }}{% endif %}"
      with_items: "{{ services.database_users }}"

    - name: Grant privs on database to user
      community.postgresql.postgresql_privs:
        db: postgres
        privs: ALL
        type: database
        obj: "{{ item.database }}"
        role: "{{ item.name }}"
      with_items: "{{ services.database_users }}"

    - name: Grant ALL on schema public
      community.postgresql.postgresql_privs:
        db: "{{ item.database }}"
        privs: ALL
        type: schema
        obj: public
        role: "{{ item.name }}"
      with_items: "{{ services.database_users }}"

- run_once: true
  delegate_to: localhost
  become: false
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  block:
    - name: Copy rotation statement to working directory
      ansible.builtin.copy:
        src: rotation.sql
        dest: /tmp/services/postgres/rotation.sql

    - name: Create static credentials role on vault
      ansible.builtin.command: >-
        vault write database/static-roles/{{ item.name }}
          db_name=postgres
          rotation_statement=@/tmp/services/postgres/rotation.sql
          username="{{ item.name }}"
          rotation_period=86400
      with_items: "{{ services.database_users }}"
